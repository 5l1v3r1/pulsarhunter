/*
Copyright (C) 2005-2007 Michael Keith, University Of Manchester

email: mkeith@pulsarastronomy.net
www  : www.pulsarastronomy.net/wiki/Software/PulsarHunter

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

*/
/*
 * FrequencyPanel.java
 *
 * Created on 24 May 2005, 18:31
 */

package pulsarhunter.jreaper.pmsurv;

import ptolemy.plot.Render;
import pulsarhunter.jreaper.Cand;




/**
 *
 * @author  mkeith
 */
public class FrequencyPanel extends Render {
    Thread thread;
    public FrequencyPanel(){
        
    }
    public FrequencyPanel(final PulsarCandFile phfile,final Cand cand,final double phase) {
        this(phfile,cand,phase,false);
    }
    /** Creates new form FrequencyPanel */
    public FrequencyPanel(final PulsarCandFile phfile,final Cand cand,final double phase,boolean threads) {
        initComponents();
        if(threads){
            
            
            
            thread = new Thread(){
                public void run(){
                    FrequencyPanel.this.setup(phfile,cand,phase);
                    
                }
            };
            //repaint();
            thread.start();
        } else{
            setup(phfile,cand,phase);
        }
    }
    
    
    
    
    private void setup(final PulsarCandFile phfile,final Cand cand,final double phase){
        // Create a sample plot.
        final int[][] colourarray = phfile.getFreqGraph(255,phase);
        clear(true);
        setGrid(false);
        int nbin = phfile.getNbin();
        setColormap(cand.getCandList().getDataLibrary().getOptions().getGrayColourMap().getGCols());
        setTitle("Frequency/Phase plot");
        setYLabel("Freqency");
        setXLabel("Phase");
        setXIncrement(1.0/nbin);
        setXOffset(0.0);
        setYIncrement(1);
        setYOffset(0.0);
        
        // Create the stripes in data form (arrays).
        
        
        
        
        // Reset the data structure.
        clearData();
        // Add the stripes to the data structure.
        for (int i = 0; i<colourarray.length; i++) {
            addStripe(colourarray[i]);
        }
        
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrequencyPanel.this.repaint();
            }
        });
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setLayout(new java.awt.BorderLayout());

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
